buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://repository.jboss.org/nexus/content/groups/public/' }
        maven { url 'https://repo.spring.io/plugins-release' }
        jcenter()
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3' // todo: get rid of this when Flume supports libext
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:3.4.0'
        classpath 'org.hidetake:gradle-ssh-plugin:1.0.5'
    }
}

apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'
apply plugin: 'nebula.ospackage'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'signing'

group = 'org.openrepose'
version = '1.0.15'
def releaseNum = '0'
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    provided 'org.apache.flume:flume-ng-core:1.5.2'
    compile 'org.scala-lang:scala-library:2.11.5'
    compile 'com.typesafe.play:play-json_2.11:2.4.0-M2'
    compile 'org.eclipse.jetty:jetty-server:9.2.7.v20150116'
    compile 'org.apache.httpcomponents:httpclient:4.3.6'
    compile 'org.apache.abdera:abdera-client:1.1.3'
    compile 'com.typesafe.scala-logging:scala-logging_2.11:3.1.0'
    testCompile 'org.scalatest:scalatest_2.11:2.2.4'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'junit:junit:4.12' // todo: get rid of this when Gradle supports ScalaTest
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.useAnt = false
}

signing {
    sign shadowJar
}

publishing {
    publications {
        mavenJar(MavenPublication) {
            artifactId "cf-flume-sink-jar"
            artifact source: shadowJar, extension: 'jar'
            artifact source: signShadowJar.singleSignature, extension: 'jar.asc', classifier: 'sig'
        }
        mavenRpm(MavenPublication) {
            artifactId "cf-flume-sink-rpm"
            artifact source: buildRpm, extension: 'rpm'
        }
        mavenDeb(MavenPublication) {
            artifactId "cf-flume-sink-deb"
            artifact source: buildDeb, extension: 'deb'
        }
    }
    repositories {
        maven {
            name 'releases.maven.research.rackspace.com'
            url 'https://maven.research.rackspacecloud.com/content/repositories/releases'
        }
    }
}

task('deploy', dependsOn: ['buildRpm', 'buildDeb']) << {
    ssh.run {
        session(remotes.packageRepo) {
            put from: buildRpm.outputs.files, into: '/home/repose-dev/RELEASES'
            put from: buildDeb.outputs.files, into: '/home/repose-dev/RELEASES'
        }
    }
}

tasks.publish.dependsOn 'signShadowJar', 'buildRpm', 'buildDeb'

shadowJar {
    relocate 'org.apache.commons.httpclient', 'org.openrepose.org.apache.commons.httpclient'
    relocate 'org.apache.http', 'org.openrepose.org.apache.http'
}

ospackage {
    packageName = 'cf-flume-sink'
    packageDescription = 'Installs a custom Flume sink which sends events over HTTP to a Cloud Feeds endpoint using ' +
                         'the AtomPub protocol.'
    os = LINUX

    packageGroup = 'Applications/Internet'
    url = 'https://github.com/rackerlabs/cf-flume-sink'
    license = 'Apache License, Version 2.0'

    if(project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile')) {
        signingKeyId project.getProperty('signing.keyId')
        signingKeyPassphrase project.getProperty('signing.password')
        signingKeyRingFile file(project.getProperty('signing.secretKeyRingFile'))
    }

    preInstall = file("$parent.projectDir/preInstall.sh")

    user = 'flume'
    permissionGroup = 'flume'

    into '/opt/flume/plugins.d/cf-flume-sink'

    from('LICENSE.txt') {
        fileType LICENSE
        into '/usr/share/doc/cf-flume-sink'
    }

    from(shadowJar.outputs.files) {
        into 'lib'
    }

    /* todo: replace fat jar with dependency jars here when Flume supports it without classpath issues
    from(configurations.runtime) {
        into 'libext'
    }
    */

    requires('flume-repose')
}

buildRpm {
    release = releaseNum
    addParentDirs false
}

buildDeb {
    // Nothing special for the .deb.
}

apply from: '../remotesConfig.gradle'

//The build task needs to also build the build rpm and deb
tasks.build.dependsOn 'buildRpm', 'buildDeb'

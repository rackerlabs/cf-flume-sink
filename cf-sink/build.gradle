buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://repository.jboss.org/nexus/content/groups/public/' }
        maven { url 'https://repo.spring.io/plugins-release' }
        jcenter()
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:2.2.0'
        classpath 'org.hidetake:gradle-ssh-plugin:1.0.5'
        classpath 'de.undercouch:gradle-download-task:1.2'
    }
}

apply plugin: 'scala'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'
apply plugin: 'os-package'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'de.undercouch.download'

group = 'org.openrepose'
version = '1.0.0'
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    provided 'org.apache.flume:flume-ng-core:1.5.2'
    compile 'org.scala-lang:scala-library:2.11.5'
    compile 'org.json4s:json4s-jackson_2.11:3.2.11'
    compile 'org.eclipse.jetty:jetty-server:9.2.7.v20150116'
    compile 'org.apache.httpcomponents:httpclient:4.3.6'
    compile 'org.apache.abdera:abdera-client:1.1.3'
    compile 'com.typesafe.scala-logging:scala-logging_2.11:3.1.0'
    testCompile 'org.scalatest:scalatest_2.11:2.2.4'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'junit:junit:4.12' // todo: get rid of this when Gradle supports ScalaTest
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.useAnt = false
}

publishing {
    publications {
        mavenJar(MavenPublication) {
            artifact jar
        }
        mavenRpm(MavenPublication) {
            artifact source: buildRpm, extension: 'rpm'
        }
        mavenDeb(MavenPublication) {
            artifact source: buildDeb, extension: 'deb'
        }
    }
    repositories {
        maven {
            name 'releases.maven.research.rackspace.com'
            url 'https://maven.research.rackspacecloud.com/content/repositories/releases'
        }
    }
}

ospackage {
    preInstall file("$parent.projectDir/preInstall.sh")

    user 'flume'
    permissionGroup 'flume'
    os 'LINUX'
}

def sinkPackageConf = {
    packageDescription 'Installs a custom Flume sink which sends events over HTTP to a Cloud Feeds endpoint using \
                         |the AtomPub protocol.'.stripMargin()
    url 'https://github.com/rackerlabs/cf-flume-sink'
    license 'Apache License, Version 2.0'

    from('LICENSE.txt') {
        fileType LICENSE
        into '/usr/share/doc/cf-flume-sink'
    }

    into '/opt/flume/plugins.d/cf-flume-sink'

    from(jar.outputs.files) {
        into 'lib'
    }
    from(configurations.runtime) {
        into 'libext'
    }

    // todo: Depends on our Flume packages
}

['buildRpm', 'buildDeb'].each {
    tasks.getByName(it, sinkPackageConf)
}

apply from: '../remotesConfig.gradle'

task('deploy', dependsOn: ['buildRpm', 'buildDeb']) << {
    ssh.run {
        session(remotes.packageRepo) {
            put from: buildRpm.outputs.files, into: '/RELEASES'
            put from: buildDeb.outputs.files, into: '/RELEASES'
        }
    }
}

//The build task needs to also build the build rpm and deb
tasks.build.dependsOn(['buildRpm', 'buildDeb'])
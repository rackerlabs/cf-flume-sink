import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://repository.jboss.org/nexus/content/groups/public/' }
        maven { url 'https://repo.spring.io/plugins-release' }
        jcenter()
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:2.2.0'
        classpath 'org.hidetake:gradle-ssh-plugin:1.0.5'
        classpath 'de.undercouch:gradle-download-task:1.2'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'
apply plugin: 'os-package'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'de.undercouch.download'

group = 'org.openrepose'


publishing {
    publications {
        mavenRpm(MavenPublication) {
            artifactId 'flume-repose-rpm'
            version "$flumeVersion"
            artifact source: buildRpm, extension: 'rpm'
        }
        mavenDeb(MavenPublication) {
            artifactId 'flume-repose-deb'
            version "$flumeVersion"
            artifact source: buildDeb, extension: 'deb'
        }
    }
    repositories {
        maven {
            name 'releases.maven.research.rackspace.com'
            url 'https://maven.research.rackspacecloud.com/content/repositories/releases'
        }
    }
}

import de.undercouch.gradle.tasks.download.Download

def flumeDir = "$buildDir/apache-flume-$flumeVersion-bin"
def flumeArchive = "${flumeDir}.tar.gz"
def flumeDistroUrl = "http://www.apache.org/dist/flume/$flumeVersion/apache-flume-$flumeVersion-bin.tar.gz"

task downloadFlume(type: Download) {
    src flumeDistroUrl
    dest buildDir
}

task unpackFlume(dependsOn: downloadFlume, type: Copy) {
    from tarTree(resources.gzip(flumeArchive))
    into buildDir
    exclude '**/log4j.properties'
}

task filterLog4j( dependsOn: unpackFlume, type: Copy ) {
    from tarTree(resources.gzip(flumeArchive))
    into buildDir
    include '**/log4j.properties'

    // to support running flume as a service, write logs to absolute path, standard location
    filter { line -> line.contains( 'flume.log.dir=./logs' ) ? 'flume.log.dir=/var/log/flume' : line }
}

def app_user = 'flume'
def app_group = 'flume'
def log_path = '/var/log/flume'

ospackage {
    packageName 'flume-repose'
    version flumeVersion
    release '1'
    packageDescription 'Installs Flume with Repose recommended settings.'

    preInstall file("$parent.projectDir/preInstall.sh")

    user app_user
    permissionGroup app_group
    os 'LINUX'

    from flumeDir
    into '/opt/flume'

    // looks like its not straightforward to create a directory with no files.  This works, though.
    // https://github.com/nebula-plugins/gradle-ospackage-plugin/issues/14
    postInstall 'mkdir -p ' + log_path + '; chown -R ' + app_user + ':' + app_group + ' ' + log_path
}

buildRpm {

    from( 'src/main/resources/sysconfig' ) {
        into '/etc/sysconfig'
        include 'flume-ng'
        user 'root'
        permissionGroup 'root'
        fileMode 0744
    }

    from( 'src/main/resources/init.d/rpm' ) {
        into '/etc/init.d'
        include 'flume-ng'
        user 'root'
        permissionGroup 'root'
        fileMode 0755
    }
}

buildRpm.dependsOn filterLog4j
buildDeb.dependsOn unpackFlume

apply from: '../remotesConfig.gradle'

task('deployFlume', dependsOn: ['buildRpm', 'buildDeb']) << {
    ssh.run {
        session(remotes.packageRepo) {
            put from: buildRpm.outputs.files, into: '/home/repose-dev/RELEASES'
            put from: buildDeb.outputs.files, into: '/home/repose-dev/RELEASES'
        }
    }
}

task('build', dependsOn: ['buildRpm', 'buildDeb'])

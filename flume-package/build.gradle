buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://repository.jboss.org/nexus/content/groups/public/' }
        maven { url 'https://repo.spring.io/plugins-release' }
        jcenter()
    }
    dependencies {
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:2.2.0'
        classpath 'org.hidetake:gradle-ssh-plugin:1.0.5'
        classpath 'de.undercouch:gradle-download-task:1.2'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'
apply plugin: 'os-package'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'de.undercouch.download'

group = 'org.openrepose'

import de.undercouch.gradle.tasks.download.Download

def flumeDir = "$buildDir/apache-flume-$flumeVersion-bin"
def flumeArchive = "${flumeDir}.tar.gz"
def flumeDistroUrl = "http://www.apache.org/dist/flume/$flumeVersion/apache-flume-$flumeVersion-bin.tar.gz"

task downloadFlume(type: Download) {
    src flumeDistroUrl
    dest buildDir
}

task unpackFlume(dependsOn: downloadFlume, type: Copy) {
    from tarTree(resources.gzip(flumeArchive))
    into buildDir

    // to support running flume as a service, write logs to absolute path, standard location
    filesMatching('**/log4j.properties') {
        filter { line -> line.contains('flume.log.dir=./logs') ? 'flume.log.dir=/var/log/flume' : line }
    }
}

def app_user = 'flume'
def app_group = 'flume'
def log_path = '/var/log/flume'

if (project.hasProperty('gpgPassphrase')) {
    allprojects { ext.'signing.keyId' = 'E7C89BBB' }
    allprojects { ext.'signing.password' = "$gpgPassphrase" }
    allprojects {
        ext.'signing.secretKeyRingFile' = project.hasProperty('secretKeyRingFile') ?
                "$secretKeyRingFile" :
                "${System.properties['user.home']}/.gnupg/secring.gpg"
    }

    signing {
        sign buildRpm
        sign buildDeb
    }

    publishing {
        publications {
            mavenRpm(MavenPublication) {
                artifactId 'flume-repose-rpm'
                version "$flumeVersion"
                artifact source: buildRpm, extension: 'rpm'
                artifact source: signBuildRpm.outputs.files.singleFile, extension: 'rpm.asc'
            }
            mavenDeb(MavenPublication) {
                artifactId 'flume-repose-deb'
                version "$flumeVersion"
                artifact source: buildDeb, extension: 'deb'
                artifact source: signBuildDeb.outputs.files.singleFile, extension: 'deb.asc'
            }
        }
        repositories {
            maven {
                name 'releases.maven.research.rackspace.com'
                url 'https://maven.research.rackspacecloud.com/content/repositories/releases'
            }
        }
    }

    task('deployFlume', dependsOn: ['buildRpm', 'buildDeb', 'signBuildRpm', 'signBuildDeb']) << {
        ssh.run {
            session(remotes.packageRepo) {
                put from: buildRpm.outputs.files, into: '/home/repose-dev/RELEASES'
                put from: signBuildRpm.outputs.files, into: '/home/repose-dev/RELEASES'
                put from: buildDeb.outputs.files, into: '/home/repose-dev/RELEASES'
                put from: signBuildDeb.outputs.files, into: '/home/repose-dev/RELEASES'
            }
        }
    }
}

ospackage {
    packageName 'flume-repose'
    version flumeVersion
    release '2'
    packageDescription 'Installs Flume with Repose recommended settings.'

    preInstall file("$parent.projectDir/preInstall.sh")

    user app_user
    permissionGroup app_group
    os 'LINUX'

    from flumeDir
    into '/opt/flume'

    from('src/main/resources/sysconfig') {
        into '/etc/sysconfig'
        include 'flume-ng'
        user 'root'
        permissionGroup 'root'
        fileMode 0644
    }

    from('src/main/resources/default/flume-ng') {
        into '/etc/default'
        include 'flume-ng'
        user 'root'
        permissionGroup 'root'
        fileMode 0644
    }

    // looks like its not straightforward to create a directory with no files.  This works, though.
    // https://github.com/nebula-plugins/gradle-ospackage-plugin/issues/14
    postInstall "mkdir -p $log_path && chown -R $app_user:$app_group $log_path"
}

buildRpm {
    from('src/main/resources/init.d/rpm') {
        into '/etc/init.d'
        include 'flume-ng'
        user 'root'
        permissionGroup 'root'
        fileMode 0755
    }
}

buildDeb {
    from('src/main/resources/init.d/deb') {
        into '/etc/init.d'
        include 'flume-ng'
        user 'root'
        permissionGroup 'root'
        fileMode 0755
    }
}

buildRpm.dependsOn unpackFlume
buildDeb.dependsOn unpackFlume

apply from: '../remotesConfig.gradle'

task('build', dependsOn: ['buildRpm', 'buildDeb'])
